1st ESP32 Code

#include <WiFi.h>
#include <esp_now.h>
#include <HTTPClient.h>
#include <MFRC522.h>
#include <SPI.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

// WiFi Credentials
const char* ssid = "PottyWifi";
const char* password = "tara tumae tayo";

// Telegram Bot
const char* botToken = "7647504514:AAFPIkrJ2JKGhbLB5Wm13EEQc9UEONcN8ow";
const char* chatID = "5939840029";

// RFID Pins
#define RST_PIN 35
#define SS_PIN 5

// Buzzer and Relay Pins (Changed BUZZER to pin 15 to avoid conflict with keypad row pin 14)
#define BUZZER 15
#define RELAY_PIN 4

// Keypad Setup
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {13, 12, 14, 33}; // Note pin 14 used for keypad row 2
byte colPins[COLS] = {27, 26, 32, 25};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// RFID
MFRC522 mfrc522(SS_PIN, RST_PIN);

//MAC address (ESP32 #2)
uint8_t peerAddress[] = {0x20, 0x43, 0xA8, 0x62, 0xA0, 0xE8};

// LCD Setup
LiquidCrystal_I2C lcd(0x27, 16, 2);

const String authorizedUID1 = "B41839DB"; 
const String authorizedUID2 = "838F5F31";

// Global Variables
String correctPasscode = "2002";
String enteredPasscode = "";
int failedAttempts = 0;
volatile bool waitingForRFID = false;
volatile bool doorLocked = true;
volatile bool changePasscodeMode = false;
volatile bool passcodeJustCorrect = false;

// FreeRTOS handles
TaskHandle_t keypadTaskHandle = NULL;
TaskHandle_t rfidTaskHandle = NULL;
SemaphoreHandle_t passcodeMutex;

// ========== ESP-NOW ==========

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("ESP-NOW send status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void sendESPNowMessage(const String &msg) {
  esp_now_send(peerAddress, (uint8_t *)msg.c_str(), msg.length() + 1);
}

void initESPNOW() {
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_register_send_cb(OnDataSent);

  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, peerAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add ESP-NOW peer");
  }
}

// ========== WiFi & Telegram ==========

void connectWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi...");
  int retry = 0;
  while (WiFi.status() != WL_CONNECTED && retry < 30) {
    delay(500);
    Serial.print(".");
    retry++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi Connected.");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nWiFi Failed.");
    buzz(3);
  }
}

void sendTelegramMessage(String message) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "https://api.telegram.org/bot" + String(botToken) +
                 "/sendMessage?chat_id=" + String(chatID) +
                 "&text=" + message;
    http.begin(url);
    int code = http.GET();
    if (code > 0) {
      Serial.println("Telegram message sent.");
    } else {
      Serial.print("Telegram error: ");
      Serial.println(code);
    }
    http.end();
  } else {
    Serial.println("WiFi not connected. Telegram failed.");
  }
}

// ========== Utility Functions ==========

void buzz(int times) {
  for (int i = 0; i < times; i++) {
    digitalWrite(BUZZER, HIGH);
    vTaskDelay(pdMS_TO_TICKS(100));
    digitalWrite(BUZZER, LOW);
    vTaskDelay(pdMS_TO_TICKS(100));
  }
}

void triggerAlarm() {
  Serial.println("ALARM: 5 failed attempts");
  sendTelegramMessage("ALERT: 5 incorrect passcode attempts!");
  for (int i = 0; i < 10; i++) {
    digitalWrite(BUZZER, HIGH);
    vTaskDelay(pdMS_TO_TICKS(1000));
    digitalWrite(BUZZER, LOW);
    vTaskDelay(pdMS_TO_TICKS(200));
  }
}

void openDoor(String user) {
  Serial.println("Access Granted: " + user);
  buzz(2);
  sendESPNowMessage("OPEN");
  doorLocked = false;
  sendTelegramMessage("Door opened by " + user);

  digitalWrite(RELAY_PIN, HIGH);
  vTaskDelay(pdMS_TO_TICKS(5000));
  digitalWrite(RELAY_PIN, LOW);

  sendESPNowMessage("LOCK");
  doorLocked = true;
  sendTelegramMessage("Door locked");
}

// ========== Keypad Task ==========

void keypadTask(void *parameter) {
  while (1) {
    char key = keypad.getKey();
    if (key) {
      Serial.print("Key Pressed: ");
      Serial.println(key);

      xSemaphoreTake(passcodeMutex, portMAX_DELAY);

      if (changePasscodeMode) {
        // Change passcode mode: build new passcode until '#' confirms or '*' cancels
        if (key == '#') {
          if (enteredPasscode.length() >= 4) {
            correctPasscode = enteredPasscode;
            lcd.clear();
            lcd.print("Passcode Changed");
            Serial.println("Passcode successfully changed to: " + correctPasscode);
            sendTelegramMessage("Passcode was changed.");
            changePasscodeMode = false;
            enteredPasscode = "";
          } else {
            lcd.clear();
            lcd.print("Passcode too short");
            enteredPasscode = "";
          }
        } else if (key == '*') {
          // Cancel change passcode mode
          changePasscodeMode = false;
          enteredPasscode = "";
          lcd.clear();
          lcd.print("Enter Passcode:");
          Serial.println("Passcode change canceled.");
        } else {
          enteredPasscode += key;
          lcd.clear();
          lcd.print("New Passcode:");
          lcd.setCursor(0, 1);
          for (int i = 0; i < enteredPasscode.length(); i++) {
            lcd.print("*");
          }
        }
      } else {
        // Normal mode
        if (key == '#') {
          if (enteredPasscode == correctPasscode) {
            Serial.println("Correct passcode.");
            lcd.clear();
            lcd.print("A: Open Door");
            lcd.setCursor(0, 1);
            lcd.print("D: Change Pass");
            waitingForRFID = true;  // Now waiting for RFID after passcode entry
            failedAttempts = 0;
            passcodeJustCorrect = true;
            enteredPasscode = "";
          } else {
            Serial.println("Incorrect Passcode!");
            failedAttempts++;
            sendTelegramMessage("Incorrect passcode attempt (" + String(failedAttempts) + "/5)");
            if (failedAttempts >= 5) {
              triggerAlarm();
              failedAttempts = 0;
            }
            lcd.clear();
            lcd.print("Incorrect code");
            enteredPasscode = "";
            passcodeJustCorrect = false;
          }
        } else if (key == '*') {
          enteredPasscode = "";
          Serial.println("Passcode cleared.");
          lcd.clear();
          lcd.print("Enter Passcode:");
          passcodeJustCorrect = false;
        } else if (key == 'A') {
          if (!waitingForRFID && passcodeJustCorrect) {
            openDoor("Keypad User");
            lcd.clear();
            lcd.print("Door Opened");
            enteredPasscode = "";
            passcodeJustCorrect = false;
          }
        } else if (key == 'D') {
          if (passcodeJustCorrect) {
            changePasscodeMode = true;
            lcd.clear();
            lcd.print("New Passcode:");
            enteredPasscode = "";
            Serial.println("Enter new passcode");
          } else {
            // Ignore D if passcode not just confirmed
            Serial.println("D pressed but passcode not correct");
          }
        } else {
          enteredPasscode += key;
          lcd.clear();
          lcd.print("Code: ");
          for (int i = 0; i < enteredPasscode.length(); i++) {
            lcd.print("*");
          }
          passcodeJustCorrect = false;
        }
      }

      xSemaphoreGive(passcodeMutex);
    }
    vTaskDelay(pdMS_TO_TICKS(100));
  }
}

// ========== RFID Task ==========

void rfidTask(void *parameter) {
  while (1) {
    if (waitingForRFID) {
      Serial.println("Waiting for RFID...");
      if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
        String uidStr = "";
        for (byte i = 0; i < mfrc522.uid.size; i++) {
          uidStr += String(mfrc522.uid.uidByte[i], HEX);
        }
        uidStr.toUpperCase();

        Serial.print("Card UID: ");
        Serial.println(uidStr);

        xSemaphoreTake(passcodeMutex, portMAX_DELAY);

        if (uidStr == authorizedUID1 || uidStr == authorizedUID2) {
          Serial.println("Access Granted: RFID User");
          openDoor("RFID User");
          lcd.clear();
          lcd.print("Access Granted");
          waitingForRFID = false;
          failedAttempts = 0;
          passcodeJustCorrect = false;
        } else {
          Serial.println("Access Denied: Unknown Card");
          lcd.clear();
          lcd.print("Access Denied");
          sendTelegramMessage("Unknown RFID card scanned: " + uidStr);
        }

        xSemaphoreGive(passcodeMutex);
        mfrc522.PICC_HaltA();
      }
    }
    vTaskDelay(pdMS_TO_TICKS(500));
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(BUZZER, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);

  // Init LCD
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.print("Initializing...");

  // Init RFID
  SPI.begin();
  mfrc522.PCD_Init();

  // Connect WiFi & init ESP-NOW
  connectWiFi();
  initESPNOW();

  // Initialize Mutex
  passcodeMutex = xSemaphoreCreateMutex();

  lcd.clear();
  lcd.print("Enter Passcode:");

  // Create tasks
  xTaskCreatePinnedToCore(keypadTask, "KeypadTask", 4096, NULL, 1, &keypadTaskHandle, 1);
  xTaskCreatePinnedToCore(rfidTask, "RFIDTask", 4096, NULL, 1, &rfidTaskHandle, 0);
}

void loop() {
  // No code here; FreeRTOS handles the tasks
}


